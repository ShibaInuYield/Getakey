import Head from 'next/head'
import { useRouter } from 'next/router'
import Layout from '@/components/Layout/Layout'
import { useAccount, useSigner,useContractEvent } from 'wagmi'
import { Flex, TableContainer, Table, TableCaption, Thead, Tbody, Tr, Td, Th, Tfoot, useToast} from '@chakra-ui/react'
import {
  Alert,
  AlertIcon
} from '@chakra-ui/react'
import { useState, useEffect } from 'react'
import { ethers } from 'ethers'
import { contractFactoryAddress, abiFactory } from "../public/constants/factory"
import Upload from '../components/Upload'

export default function createRental() {
  const { isConnected } = useAccount()
  const { data: signer } = useSigner()
  const toast = useToast()
  const router = useRouter()

  const [name, setName] = useState("");
  const [symbol, setSymbol] = useState("");
  const [description, setDescription] = useState("");
  const [rental, setRental] = useState("");
  const[image,setImage] = useState("");

  useContractEvent({
    address: contractFactoryAddress,
    abi: abiFactory,
    eventName: 'RentalCollectionCreated',
    listener(_rentalName, _rentalSymbol, _collectionAddress,_timestamp) {
      if(rental !== "")
      {
        toast({
          title: 'Congratulations',
          description: `The rental ${_rentalName} with ${_rentalSymbol} \n at the address ${_collectionAddress} has been created!`,
          status: 'success',
          duration: 5000,
          isClosable: true,
        })
      }
    },
  },[rental]);

  function handleRentalNameChange(event) {
    setName(event.target.value);
  }

  function handleRentalSymnbolChange(event) {
    setSymbol(event.target.value);
  }

  function handleRentalDescriptionChange(event) {
    setDescription(event.target.value);
  }

  const createRental = async() => {

    try {
        const contract = new ethers.Contract(contractFactoryAddress, abiFactory, signer);
        if(image === "")
        {
          toast({
            title: 'Error',
            description: 'You must upload an image before validating',
            status: 'error',
            duration: 5000,
            isClosable: true,
          })
          return;
        }

        if(name === "" || symbol === "" || description === ""){
          toast({
            title: 'Error',
            description: 'All fields are mandatory',
            status: 'error',
            duration: 5000,
            isClosable: true,
          })
          return;
        }
        let transaction = await contract.createRentalCollection(name, symbol, description,`https://ipfs.io/ipfs/${image}`);
        await transaction.wait()
        setRental(transaction);
        setName("");
        setSymbol("");
        setDescription("");
        setImage("");
        
    }
    catch(e) {
        toast({
            title: 'Error',
            description: `${String(e).includes("Rental name already exists") ? "Rental name already exists" : e}`,
            status: 'error',
            duration: 5000,
            isClosable: true,
        })
        console.log(e)
    }
    
  }
  
  function validateName(value) {
    let error
    if (!value) {
      error = 'Name is required'
    }
    return error
  }

  return (
    <>
      <Head>
        <title>Cryptokey DApp : Generate key</title>
        <meta name="description" content="Generated by cryptokey app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {isConnected ? (
          <Flex alignItems="center">
            <TableContainer>
            <Table size="lg" variant='striped' color="#000000" backgroundColor='#73a7eb'>
              <TableCaption>List of all rentals</TableCaption>
              <Thead>
                <Tr>
                  <Th>nft id</Th>
                  <Th>vacantion start</Th>
                  <Th>vacation end</Th>
                  <Th>renter</Th>
                  <Th>Is rented</Th>
                  <Th>Paid</Th>
                </Tr>
              </Thead>
              <Tbody>
                <Tr>
                  <Td>inches</Td>
                  <Td>millimetres (mm)</Td>
                  <Td isNumeric>25.4</Td>
                  <Td>inches</Td>
                  <Td>millimetres (mm)</Td>
                  <Td isNumeric>25.4</Td>
                </Tr>
                <Tr>
                  <Td>feet</Td>
                  <Td>centimetres (cm)</Td>
                  <Td isNumeric>30.48</Td>
                  <Td>feet</Td>
                  <Td>centimetres (cm)</Td>
                  <Td isNumeric>30.48</Td>
                </Tr>
                <Tr>
                  <Td>yards</Td>
                  <Td>metres (m)</Td>
                  <Td isNumeric>0.91444</Td>
                  <Td>yards</Td>
                  <Td>metres (m)</Td>
                  <Td isNumeric>0.91444</Td>
                </Tr>
              </Tbody>
            </Table>
          </TableContainer>
          </Flex>
        ) : (
          <Alert status='warning' width="50%">
            <AlertIcon />
            Please, connect your Wallet.
          </Alert>
        )}
      </Layout>
    </>
  )
}