import Head from 'next/head'
import { useRouter } from 'next/router'
import Layout from '@/components/Layout/Layout'
import { useAccount, useSigner,useProvider } from 'wagmi'
import { Text, Flex, TableContainer, Table, TableCaption, Thead, Tbody, Tr, Td, Th} from '@chakra-ui/react'
import {
  Alert,
  AlertIcon
} from '@chakra-ui/react'
import { useState, useEffect } from 'react'
import { ethers } from 'ethers'
import { contractFactoryAddress, abiFactory } from "../public/constants/factory.js"
import { contractAddress, abi } from "../public/constants/contract"
import Mint from '@/components/Mint'

export default function GenerateKey() {
  const {address, isConnected } = useAccount();

  const [allRentals, setAllRentals] = useState([]);

  const [isOwner, setIsOwner] = useState(false);

useEffect(() => {
  fetchReservations();
}, [address]);

  const provider = useProvider()
  const { data: signer } = useSigner()

  async function fetchReservations() {

  const contractFactory = new ethers.Contract(contractFactoryAddress, abiFactory, provider)
  if (!contractFactory) return;

   // Get the address of the rental collection associated with the current user's address
  const contractAddress = await contractFactory.getRentalCollections(address);

  if (!contractAddress[0]) return;
  // // Load the existing rental collection contract
  const rentalCollection = new ethers.Contract(contractAddress[0], abi, provider);

  const contract = new ethers.Contract(contractAddress[0], abi, provider)
  if (!contract) return;

  try {
    const owner = await contract.owner();
    setIsOwner(owner === address);

    const rentalPeriodCreatedFilter = contract.filters.RentalPeriodCreated();
    if (!rentalPeriodCreatedFilter) return;

    const rentalPeriodCreatedEvents = await contract.queryFilter(
      rentalPeriodCreatedFilter
    );
    if (!rentalPeriodCreatedEvents) return;
    const fetchedRentals = rentalPeriodCreatedEvents.map(
      (rental) => ({
        id: rental?.args?.nftId.toNumber(),
        startTimestamp: new Date(rental?.args?._startTimestamp * 1000).toLocaleDateString(),
        endTimestamp: new Date(rental?.args?._endTimestamp * 1000).toLocaleDateString(),
        renter: rental?.args?._renter,
        isPaid: rental?.args?._isPaid ? "Yes" : "No",
        isRented: rental?.args?.isRented ? "Yes" : "No"
      }));

    setAllRentals(fetchedRentals);
  } catch (error) {
    console.error(error);
  }
  }

  return (
    <>
      <Head>
        <title>Cryptokey DApp : Generate key</title>
        <meta name="description" content="Generated by cryptokey app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>   
        {isConnected ? 
        // isOwner ? 
        // (
          <Flex alignItems="center">        
            <TableContainer borderWidth="3px" borderRadius="10px">           
            <Table size="sm" variant='striped' color="#000000" backgroundColor='#446a9d'>
              <TableCaption>List of all rentals</TableCaption>
              <Thead>
                <Tr>
                  <Th>nft id</Th>
                  <Th>vacantion start</Th>
                  <Th>vacation end</Th>
                  <Th>renter</Th>
                  <Th>Paid</Th>
                  <Th>Is rented</Th>
                  <Th></Th>
                </Tr>
              </Thead>
              <Tbody>                             
              {allRentals.map(({id, startTimestamp, endTimestamp, renter, isPaid, isRented }) => (
              <Tr key={id}>
                <Td>{id}</Td>
                <Td>{startTimestamp}</Td>
                <Td>{endTimestamp}</Td>
                <Td>{renter}</Td>
                <Td textAlign="center">{isPaid}</Td>
                <Td textAlign="center">{isRented }</Td>
                <Td><Mint nftId={id} renter={renter} startTimestamp={startTimestamp} endTimestamp={endTimestamp} isPaid={isPaid} isRented={isRented}/></Td>
              </Tr>
              ))}  
              </Tbody>
            </Table>
          </TableContainer>
          </Flex>
        // ) : (
        //   <Alert borderRadius="10" fontFamily="fantasy" textAlign="center" status='info' width="50%" height="10%">
        //   <AlertIcon />
        //   Not allowed to see this page!
        // </Alert>
        // )
        :(
          <Alert borderRadius="10" fontFamily="fantasy" textAlign="center" status='info' width="50%" height="10%">
          <AlertIcon />
          Please, connect your Wallet!
          </Alert>
        )
      }
      </Layout>
    </>
  )
}