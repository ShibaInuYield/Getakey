import Rental from '@/components/Rental.js'
import Head from 'next/head'
import Layout from '@/components/Layout/Layout'
import { useAccount, useProvider } from 'wagmi'
import { Flex, Grid } from '@chakra-ui/react'
import {
  Alert,
  AlertIcon
} from '@chakra-ui/react'
import { useEffect, useState } from 'react'
import { ethers } from 'ethers'
import { contractFactoryAddress, abiFactory } from "../public/constants/factory.js"

export default function rental() {
 
  const {isConnected } = useAccount()
  const provider = useProvider()

  const [rentalCollections, setRentalCollections] = useState([]);
  
  useEffect(() =>{
    getRentalCollections();
  },[]);

  async function fetchRentalCollections() {
    const contractFactory = new ethers.Contract(contractFactoryAddress, abiFactory, provider)
    if (!contractFactory) return;

    try {
      const rentalCollectionCreatedFilter = contractFactory.filters.RentalCollectionCreated();
      if (!rentalCollectionCreatedFilter) return;

      const rentalCollectionCreatedEvents = await contractFactory.queryFilter(
        rentalCollectionCreatedFilter
      );
      if (!rentalCollectionCreatedEvents) return;
      const fetchedRentalCollections = rentalCollectionCreatedEvents.map(
        (rentalCollection) => ({
          name: rentalCollection?.args?._rentalName,
          symbol: rentalCollection?.args?._rentalSymbol,
          description: rentalCollection?.args?._description,
          timestamp: rentalCollection?.args?._timestamp,
          image: rentalCollection?.args?._image
        }));

      setRentalCollections(fetchedRentalCollections);
      console.log(rentalCollections);
    } catch (error) {
      console.error(error);
    }
  }

  const getRentalCollections = async() => {
  try {
    fetchRentalCollections();
  }
  catch(e) {
    console.error(error);
  }
}
  
  return (
    <>
      <Head>
        <title>Cryptokey DApp : See the rentals</title>
        <meta name="description" content="Generated by cryptokey app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
      {isConnected ? (
      <div>
        <Flex alignItems="center" wrap="wrap" justify="center" grow="2">
        <Grid templateColumns='repeat(2, 1fr)' gap={3}>
           {rentalCollections.map(({ name, symbol, description, image }) => (
               <Rental key={name}
               image={image}
               title={`${name} ${symbol}`}
               description={description}
             />
          )
        )}  
        </Grid>
        </Flex>
        </div>
        ) : (
          <Alert status='warning' width="50%">
            <AlertIcon />
            Please, connect your Wallet!
          </Alert>
        )}
      </Layout>
    </>
  );
};